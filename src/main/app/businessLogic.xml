<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:wd-integration="http://www.mulesoft.org/schema/mule/wd-integration" xmlns:wd-staffing="http://www.mulesoft.org/schema/mule/wd-staffing" xmlns:wd-hr="http://www.mulesoft.org/schema/mule/wd-hr" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/wd-hr http://www.mulesoft.org/schema/mule/wd-hr/current/mule-wd-hr.xsd
http://www.mulesoft.org/schema/mule/wd-staffing http://www.mulesoft.org/schema/mule/wd-staffing/current/mule-wd-staffing.xsd
http://www.mulesoft.org/schema/mule/wd-integration http://www.mulesoft.org/schema/mule/wd-integration/current/mule-wd-integration.xsd" version="EE-3.5.0">
    <data-mapper:config name="User_To_EmployeePersonalInfoUpdateType" transformationGraphPath="user_to_employeepersonalinfoupdatetype.grf" doc:name="User_To_EmployeePersonalInfoUpdateType"/>
    <data-mapper:config name="User_To_HireEmployeeRequestType" transformationGraphPath="user_to_hireemployeerequesttype.grf" doc:name="User_To_HireEmployeeRequestType"/>
    <data-mapper:config name="User_To_HireEmployeeRequestType_1" transformationGraphPath="user_to_hireemployeerequesttype_1.grf" doc:name="User_To_HireEmployeeRequestType_1"/>
	<data-mapper:config name="List_WorkerType__To_List_User1" transformationGraphPath="list_workertype__to_user.grf" doc:name="List_WorkerType__To_User"/>
	
    
    <batch:job name="fromSalesforceToWorkdayBatch" max-failed-records="-1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>

            <batch:step name="getWorkerInWorkdayStep" >
                <enricher source="#[payload]" target="#[recordVars['userInTargetInstance']]" doc:name="store user">
                    <wd-hr:get-worker-profile config-ref="WorkdayHumanResource" workerProfileRequest-ref="#[org.mule.kicks.WorkersRequest.getWorker(payload['Id'])]" doc:name="Workday Human Resource"/>
                </enricher>
            </batch:step>
            <batch:step name="GetLastModifiedDateInWorkday" accept-expression="(recordVars['userInTargetInstance'] != null)">
                <enricher source="#[payload]" target="#[recordVars['LastModifiedDate']]" doc:name="store the value in 'recordVars['LastModifiedDate']'">
                    <processor-chain doc:name="Processor Chain">
                        <wd-hr:get-worker-event-history config-ref="WorkdayHumanResource" workerEventHistoryRequest-ref="#[org.mule.kicks.WorkersRequest.getWorkerHistory(payload['Id'])]" doc:name="Workday Human Resource"/>
                        <custom-transformer class="org.mule.kicks.EventHistoryProcessor" doc:name="Iterate through events"/>
                    </processor-chain>
                </enricher>

            </batch:step>
            <batch:step name="insertWorkerInWorkDay" accept-policy="ONLY_FAILURES">
                <data-mapper:transform doc:name="User To HireEmployeeRequestType" config-ref="User_To_HireEmployeeRequestType_1"/>

        		<wd-staffing:hire-employee config-ref="Workday_Staffing" doc:name="Workday Staffing"/>
            </batch:step>
            <batch:step name="updateUsersInWorkDayStep" accept-expression="(org.mule.kicks.DateUtils.isAfter(payload['LastModifiedDate'], recordVars['LastModifiedDate'])) &amp;&amp; '${sfdc.integration.user.id}' != payload.get('LastModifiedById'))">
                <data-mapper:transform config-ref="User_To_EmployeePersonalInfoUpdateType" doc:name="User To EmployeePersonalInfoUpdateType"/>
                <wd-hr:update-employee-personal-info config-ref="WorkdayHumanResource" doc:name="Workday Human Resource"/>

            </batch:step>
 
        </batch:process-records>
        <batch:on-complete>
            <expression-component doc:name="release lock"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
        </batch:on-complete>
    </batch:job>
            
    <batch:job name="fromWorkDayToSalesforceBatch" max-failed-records="-1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>

            <batch:step name="GetLastEvent">
                <enricher source="payload" target="#[recordVars['lastEvent']]" doc:name="store the value in 'recordVars['lastEvent']'">
                    <processor-chain doc:name="Processor Chain">
                        <logger message="bbbbb" level="INFO" doc:name="Logger"/>
                        <wd-integration:get-event-detail config-ref="Workday_Integrations" eventDetailRequest-ref="#[org.mule.kicks.EventDetailRequest.create(payload)]" doc:name="Query for the last event"/>
                        <custom-transformer class="org.mule.kicks.TransactionLogProcessor" doc:name="iterate through transaction logs"/>
                    </processor-chain>
                </enricher>

            </batch:step>
            <batch:step name="MapToSalesforce">
                <data-mapper:transform config-ref="List_WorkerType__To_List_User1" doc:name="map Workday Worker To Salesforce User"/>
                <expression-component doc:name="setup Salesforce User"><![CDATA[ payload = payload[0];
 payload.put("LastModifiedDate", recordVars['lastEvent']['LastModifiedDate']);
 payload.put("LastModifiedById", recordVars['lastEvent']['LastModifiedById']);
 payload.put('Alias', payload['Alias'] == null ? (payload['FirstName'].substring(0, 1) + payload['LastName'].substring(0, payload['LastName'].length() < 7 ? payload['LastName'].length() : 7) ) : payload['Alias'].substring(0, payload['Alias'].length() < 8 ? payload['Alias'].length() : 8));

 payload.put('ProfileId', '${sfdc.profileId}'); 

 payload.put('Username',  payload['Username'] == null ? payload['Email'] + '.target' : payload['Username']); 

 // We remove these fields as they are internally managed by SalesForce and it is not valid to create/update an object with them 
 payload.remove('type'); 
 payload.remove('LastModifiedDate');

 payload.put('LocaleSidKey', payload['LocaleSidKey'] == null ? '${sfdc.localeSidKey}' : payload['LocaleSidKey']);
 payload.put('LanguageLocaleKey', payload['LanguageLocaleKey'] == null ? '${sfdc.languageLocaleKey}' : payload['LanguageLocaleKey']);
 payload.put('TimeZoneSidKey', payload['TimeZoneSidKey'] == null ? '${sfdc.timeZoneSidKey}' : payload['TimeZoneSidKey']);
 payload.put('EmailEncodingKey', payload['EmailEncodingKey'] == null ? '${sfdc.emailEncodingKey}' : payload['EmailEncodingKey']);

]]></expression-component>
            </batch:step>
            <batch:step name="getUserInSalesforceStep">
                <enricher doc:name="store the value in recordVars['userInTargetInstance']" source="#[payload]" target="#[recordVars['userInTargetInstance']]">
                    <sfdc:query-single config-ref="Salesforce" query="SELECT Id, Email, LastModifiedDate FROM User WHERE (Email = '#[payload['Email']]')" doc:name="query user from Salesforce"/>
                </enricher>
                <logger message="updating: #[recordVars['userInTargetInstance'] is NullPayload ? true : org.mule.templates.date.DateUtils.dateToDateTime(payload['LastModifiedDate']).isAfter(org.mule.templates.date.DateUtils.ISOStringDateToDateTime(recordVars['userInTargetInstance']['LastModifiedDate'])) &amp;&amp; '${wday.integration.user.id}' != payload.get('LastModifiedById')]" level="INFO" doc:name="Logger"/>
                <logger message="intgid: #[payload.get('LastModifiedById')]" level="INFO" doc:name="Logger"/>
            </batch:step>
            <batch:step name="upsertUserInSalesforceStep" accept-expression="recordVars['userInTargetInstance'] is NullPayload ? true : org.mule.templates.date.DateUtils.dateToDateTime(payload['LastModifiedDate']).isAfter(org.mule.templates.date.DateUtils.ISOStringDateToDateTime(recordVars['userInTargetInstance']['LastModifiedDate'])) &amp;&amp; '${wday.integration.user.id}' != payload.get('LastModifiedById')">

            	<expression-component doc:name="prepare user for upsert"><![CDATA[payload.remove('LastModifiedDate'); 
   payload.remove('LastModifiedById');  

   if(!(recordVars['userInTargetInstance'] is NullPayload)) { 
   		payload.put('Id',recordVars['userInTargetInstance'].get('Id')); 
   } 

   // We map the profile IDs from Database to Salesforce, each profileId from the left (source) will be map to the one on the right (target)  
   payload.put('ProfileId', '${sfdc.profileId}');  
     
   ]]></expression-component>
  				<batch:commit size="200" doc:name="Batch Commit">
                     <sfdc:upsert config-ref="Salesforce" externalIdFieldName="Id" type="User" doc:name="upsert user in Salesforce"> 
                         <sfdc:objects ref="#[payload]"/> 
                     </sfdc:upsert> 
                    <logger message="Upsert Salesforce response: #[payload]" level="INFO" doc:name="log response"/> 
                </batch:commit>
            </batch:step>  
        </batch:process-records>
        <batch:on-complete>
            <expression-component doc:name="release lock"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
        </batch:on-complete>
    </batch:job>
    
</mule>
